/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CrawlConfig as PrismaCrawlConfig } from "@prisma/client";

export class CrawlConfigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CrawlConfigCountArgs, "select">
  ): Promise<number> {
    return this.prisma.crawlConfig.count(args);
  }

  async crawlConfigs<T extends Prisma.CrawlConfigFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrawlConfigFindManyArgs>
  ): Promise<PrismaCrawlConfig[]> {
    return this.prisma.crawlConfig.findMany<Prisma.CrawlConfigFindManyArgs>(
      args
    );
  }
  async crawlConfig<T extends Prisma.CrawlConfigFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrawlConfigFindUniqueArgs>
  ): Promise<PrismaCrawlConfig | null> {
    return this.prisma.crawlConfig.findUnique(args);
  }
  async createCrawlConfig<T extends Prisma.CrawlConfigCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrawlConfigCreateArgs>
  ): Promise<PrismaCrawlConfig> {
    return this.prisma.crawlConfig.create<T>(args);
  }
  async updateCrawlConfig<T extends Prisma.CrawlConfigUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrawlConfigUpdateArgs>
  ): Promise<PrismaCrawlConfig> {
    return this.prisma.crawlConfig.update<T>(args);
  }
  async deleteCrawlConfig<T extends Prisma.CrawlConfigDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrawlConfigDeleteArgs>
  ): Promise<PrismaCrawlConfig> {
    return this.prisma.crawlConfig.delete(args);
  }
}
