/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CrawlConfigService } from "../crawlConfig.service";
import { CrawlConfigCreateInput } from "./CrawlConfigCreateInput";
import { CrawlConfig } from "./CrawlConfig";
import { CrawlConfigFindManyArgs } from "./CrawlConfigFindManyArgs";
import { CrawlConfigWhereUniqueInput } from "./CrawlConfigWhereUniqueInput";
import { CrawlConfigUpdateInput } from "./CrawlConfigUpdateInput";

export class CrawlConfigControllerBase {
  constructor(protected readonly service: CrawlConfigService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CrawlConfig })
  async createCrawlConfig(
    @common.Body() data: CrawlConfigCreateInput
  ): Promise<CrawlConfig> {
    return await this.service.createCrawlConfig({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CrawlConfig] })
  @ApiNestedQuery(CrawlConfigFindManyArgs)
  async crawlConfigs(@common.Req() request: Request): Promise<CrawlConfig[]> {
    const args = plainToClass(CrawlConfigFindManyArgs, request.query);
    return this.service.crawlConfigs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CrawlConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async crawlConfig(
    @common.Param() params: CrawlConfigWhereUniqueInput
  ): Promise<CrawlConfig | null> {
    const result = await this.service.crawlConfig({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CrawlConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCrawlConfig(
    @common.Param() params: CrawlConfigWhereUniqueInput,
    @common.Body() data: CrawlConfigUpdateInput
  ): Promise<CrawlConfig | null> {
    try {
      return await this.service.updateCrawlConfig({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CrawlConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCrawlConfig(
    @common.Param() params: CrawlConfigWhereUniqueInput
  ): Promise<CrawlConfig | null> {
    try {
      return await this.service.deleteCrawlConfig({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
