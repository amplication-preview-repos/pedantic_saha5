/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PageContent } from "./PageContent";
import { PageContentCountArgs } from "./PageContentCountArgs";
import { PageContentFindManyArgs } from "./PageContentFindManyArgs";
import { PageContentFindUniqueArgs } from "./PageContentFindUniqueArgs";
import { DeletePageContentArgs } from "./DeletePageContentArgs";
import { PageContentService } from "../pageContent.service";
@graphql.Resolver(() => PageContent)
export class PageContentResolverBase {
  constructor(protected readonly service: PageContentService) {}

  async _pageContentsMeta(
    @graphql.Args() args: PageContentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PageContent])
  async pageContents(
    @graphql.Args() args: PageContentFindManyArgs
  ): Promise<PageContent[]> {
    return this.service.pageContents(args);
  }

  @graphql.Query(() => PageContent, { nullable: true })
  async pageContent(
    @graphql.Args() args: PageContentFindUniqueArgs
  ): Promise<PageContent | null> {
    const result = await this.service.pageContent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PageContent)
  async deletePageContent(
    @graphql.Args() args: DeletePageContentArgs
  ): Promise<PageContent | null> {
    try {
      return await this.service.deletePageContent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
