/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PageContentService } from "../pageContent.service";
import { PageContentCreateInput } from "./PageContentCreateInput";
import { PageContent } from "./PageContent";
import { PageContentFindManyArgs } from "./PageContentFindManyArgs";
import { PageContentWhereUniqueInput } from "./PageContentWhereUniqueInput";
import { PageContentUpdateInput } from "./PageContentUpdateInput";

export class PageContentControllerBase {
  constructor(protected readonly service: PageContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PageContent })
  async createPageContent(
    @common.Body() data: PageContentCreateInput
  ): Promise<PageContent> {
    return await this.service.createPageContent({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PageContent] })
  @ApiNestedQuery(PageContentFindManyArgs)
  async pageContents(@common.Req() request: Request): Promise<PageContent[]> {
    const args = plainToClass(PageContentFindManyArgs, request.query);
    return this.service.pageContents({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PageContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pageContent(
    @common.Param() params: PageContentWhereUniqueInput
  ): Promise<PageContent | null> {
    const result = await this.service.pageContent({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PageContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePageContent(
    @common.Param() params: PageContentWhereUniqueInput,
    @common.Body() data: PageContentUpdateInput
  ): Promise<PageContent | null> {
    try {
      return await this.service.updatePageContent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PageContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePageContent(
    @common.Param() params: PageContentWhereUniqueInput
  ): Promise<PageContent | null> {
    try {
      return await this.service.deletePageContent({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
