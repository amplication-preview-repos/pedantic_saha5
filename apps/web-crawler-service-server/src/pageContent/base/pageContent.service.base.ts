/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PageContent as PrismaPageContent } from "@prisma/client";

export class PageContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PageContentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pageContent.count(args);
  }

  async pageContents<T extends Prisma.PageContentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageContentFindManyArgs>
  ): Promise<PrismaPageContent[]> {
    return this.prisma.pageContent.findMany<Prisma.PageContentFindManyArgs>(
      args
    );
  }
  async pageContent<T extends Prisma.PageContentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageContentFindUniqueArgs>
  ): Promise<PrismaPageContent | null> {
    return this.prisma.pageContent.findUnique(args);
  }
  async createPageContent<T extends Prisma.PageContentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageContentCreateArgs>
  ): Promise<PrismaPageContent> {
    return this.prisma.pageContent.create<T>(args);
  }
  async updatePageContent<T extends Prisma.PageContentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageContentUpdateArgs>
  ): Promise<PrismaPageContent> {
    return this.prisma.pageContent.update<T>(args);
  }
  async deletePageContent<T extends Prisma.PageContentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageContentDeleteArgs>
  ): Promise<PrismaPageContent> {
    return this.prisma.pageContent.delete(args);
  }
}
